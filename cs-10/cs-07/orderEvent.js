// 1) Ï£ºÎ¨∏ Ïù¥Î≤§Ìä∏ ÏöîÍµ¨ÏÇ¨Ìï≠
// ÏßÅÏ†ë Ïä§Î†àÎìúÎ•º ÎßåÎìúÎäî ÎåÄÏã†Ïóê, EventÎ•º Ï≤òÎ¶¨ÌïòÎäî ÎπÑÎèôÍ∏∞ Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ÌïòÎèÑÎ°ù Íµ¨ÌòÑÌïúÎã§.
// ÎÖ∏ÎìúÎäî Event Emitter Ï∞∏Í≥†
// Ï£ºÎ¨∏ Îã¥ÎãπÏûê(Cashier)Îäî ÏùåÎ£å Ï£ºÎ¨∏ÏùÑ Ïó∞ÏÜçÌï¥ÏÑú Î∞õÏùÑ Ïàò ÏûàÎã§.
// ÏùåÎ£å Ï£ºÎ¨∏ÏùÑ Î∞õÏúºÎ©¥ Ï£ºÎ¨∏ ÎåÄÍ∏∞Ìëú(Queue)Ïóê Ï∂îÍ∞ÄÌïúÎã§.
// Ï£ºÎ¨∏ ÎåÄÍ∏∞ÌëúÎèÑ Ïù¥Î≤§Ìä∏Î•º Î∞õÏïÑÏÑú Ï≤òÎ¶¨ÌïòÎäî Î≥ÑÎèÑ Î™®Îìà/Í∞ùÏ≤¥Î°ú Î∂ÑÎ¶¨Ìï¥ÏÑú Íµ¨ÌòÑÌïúÎã§.

// Îß§ÎãàÏ†Ä(Manager)Îäî ÏùåÎ£åÎ•º ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú Ï£ºÎ¨∏ ÎåÄÍ∏∞ÌëúÎ•º 1Ï¥àÎßàÎã§ ÌôïÏù∏ÌïúÎã§.

// Ï£ºÎ¨∏Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÏûëÏóÖÏù¥ ÎπÑÏñ¥ÏûàÎäî (Ï†úÏûëÌï† Ïàò ÏûàÎäî) Î∞îÎ¶¨Ïä§ÌÉÄÏóêÍ≤å ÏûëÏóÖ Ïù¥Î≤§Ìä∏Î•º Ï†ÑÎã¨ÌïúÎã§.
// Î∞îÎ¶¨Ïä§ÌÉÄ(Barista)Îäî ÎèôÏãúÏóê 2Í∞úÍπåÏßÄ ÏùåÎ£åÎ•º ÎßåÎì§ Ïàò ÏûàÎã§Í≥† Í∞ÄÏ†ïÌïúÎã§.
// Ïä§Î†àÎìúÎ•º ÏßÅÏ†ë ÏÉùÏÑ±ÌïòÎäî Í≤å ÏïÑÎãàÎùº Ïù¥Î≤§Ìä∏ Î∞©ÏãùÏúºÎ°ú ÎèôÏûëÌï¥Ïïº ÌïúÎã§.
// Î∞îÎ¶¨Ïä§ÌÉÄÎäî ÏùåÎ£åÎ•º ÎßåÎì§Í∏∞ ÏãúÏûëÌï† ÎïåÏôÄ ÎÅùÎÇ† Îïå ÎßàÎã§ Ïù¥Î≤§Ìä∏Î•º Î∞úÏÉùÌïúÎã§.
// Ïù¥Î≤§Ìä∏Í∞Ä Î∞úÏÉùÌï† ÎïåÎßàÎã§ ÏùåÎ£å ÏûëÏóÖÏóê ÎåÄÌïú Î°úÍ∑∏Î•º Ï∂úÎ†•ÌïúÎã§.
// Îß§ÎãàÏ†Ä(Manager)Îäî Î∞îÎ¶¨Ïä§ÌÉÄÍ∞Ä Î≥¥ÎÇ∏ ÌäπÏ†ï Í≥†Í∞ùÏùò ÏùåÎ£å Ï†úÏûë ÏôÑÎ£å Ïù¥Î≤§Ìä∏Î•º Î∞õÏúºÎ©¥ ÌòÑÌô©ÌåêÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ÌïúÎã§.
// ÌòÑÌô©Ìåê(DashBoard)Îäî ÏùåÎ£å Ï£ºÎ¨∏ ÏôÑÏÑ±ÌëúÎ•º Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú ÌôîÎ©¥Ïóê Ï∂úÎ†•ÌïúÎã§.
// Í≥†Í∞ùÎ≥ÑÎ°ú ÏùåÎ£åÏàòÏóê ÎåÄÌï¥ ÎåÄÍ∏∞Ï§ë/Ï†úÏûëÏ§ë/ÏôÑÎ£å ÏÉÅÌÉúÎ•º ÌëúÏãúÌïúÎã§.
// ÌòÑÌô©ÌåêÎèÑ Ïù¥Î≤§Ìä∏Î•º Î∞õÏïÑÏÑú Ï≤òÎ¶¨ÌïòÎäî Î≥ÑÎèÑ Î™®Îìà/Í∞ùÏ≤¥Î°ú Î∂ÑÎ¶¨Ìï¥ÏÑú Íµ¨ÌòÑÌïúÎã§.
// ÏïÑÎûò ÎèôÏûë ÏòàÏãúÎäî Ïù¥Ìï¥Î•º ÎèïÍ∏∞ÏúÑÌïú ÏòàÏãúÏùº Îøê ÎèôÏùºÌïòÍ≤å Ï∂úÎ†•Ìï† ÌïÑÏöî ÏóÜÎã§. Í∞Å ÏöîÍµ¨ÏÇ¨Ìï≠ÏùÑ ÌôïÏù∏ÌïòÍ∏∞ ÏúÑÌï¥ÏÑú ÎåÄÍ∏∞Ìëú, ÌòÑÌô©Ìåê Îì±ÏùÑ Ïñ¥Îñ§ Íµ¨Ï°∞Î°ú Ïñ¥ÎñªÍ≤å Íµ¨Î∂ÑÌï¥ÏÑú ÌëúÏãúÌïòÎäî Í≤å Ï†ÅÎãπÌïúÏßÄ Ï∂úÎ†• ÌòïÏãùÏùÑ Í≥†ÎØºÌïúÎã§.

// ÎèôÏûë ÏòàÏãú
// Î∞îÎ¶¨Ïä§ÌÉÄÍ∞Ä 1Î™ÖÎßå ÏûàÎã§Í≥† Í∞ÄÏ†ïÌñàÏùÑ Îïå ÎèôÏûë ÏòàÏãú

// > Î©îÎâ¥  =  1. ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏(3s)    2. Ïπ¥ÌéòÎùºÎñº(5s)    3. ÌîÑÎùºÌîÑÏπòÎÖ∏(10s)
// > Ï£ºÎ¨∏Ìï† ÏùåÎ£åÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî. Ïòà) ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏ 2Í∞ú => 1:2
// > 1:2
// /1,1/
// ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏ ÏãúÏûë
// > 3:2
// /1,3,3/
// ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏ ÏãúÏûë
// > 2:2
// /3,3,2,2/
// ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏ ÏôÑÏÑ±
// /3,2,2/
// ÌîÑÎùºÌîÑÏπòÎÖ∏ ÏãúÏûë
// ÏïÑÎ©îÎ¶¨Ïπ¥ÎÖ∏ ÏôÑÏÑ±
// /2,2/
// ÌîÑÎùºÌîÑÏπòÎÖ∏ ÏãúÏûë
// ..........
// ÌîÑÎùºÌîÑÏπòÎÖ∏ ÏôÑÏÑ±
// ÌîÑÎùºÌîÑÏπòÎÖ∏ ÏôÑÏÑ±
// /2/
// Ïπ¥ÌéòÎùºÎñº ÏãúÏûë
// //
// Ïπ¥ÌéòÎùºÎñº ÏãúÏûë
// ...
// Ïπ¥ÌéòÎùºÎñº ÏôÑÏÑ±
// Ïπ¥ÌéòÎùºÎñº ÏôÑÏÑ±
// Î™®Îì† Î©îÎâ¥Í∞Ä ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§.

const EventEmitter = require('events');
const emitter = new EventEmitter();

let chalk = require('chalk');
let y = chalk.yellow;
let b = chalk.blue;
let r = chalk.red;
let g = chalk.green;
let m = chalk.magenta;
let w = chalk.white;

const MENU = {
  1: {
    emoji: `‚òï`,
    menu: `Americano`,
    sec: 3,
  },
  2: {
    emoji: `üê¥`,
    menu: `CaffeLatte`,
    sec: 5,
  },
  3: {
    emoji: `üçø`,
    menu: `Frappuccino`,
    sec: 10,
  },
};

// ============================== Manager =================================
class Manager {
  constructor() {
    this.guest = 1;
    emitter.on('addQueue', () => {
      // setInterval(() => {
      this.checkQueue();
      // }, 1000);
    });
  }

  checkQueue() {
    if (Object.keys(QUEUE).length - 3 > 0) {
      // QUEUEÏóê ÏûëÏóÖ ÏûàÏùå
      this.checkBarista();
    }
  }

  checkBarista() {
    if (barista.working.length < 1) {
      barista.working.push(QUEUE[this.guest]);
      delete QUEUE[this.guest];
      this.guest++;
      console.table(QUEUE);
      console.table(barista.working);
      barista.making();
    }
  }
}

// ============================== Cashier =================================

class Cashier {
  constructor(guest, order, cups) {
    this.guest = guest;
    this.order = order;
    this.cups = cups;
    this.queue = {};
    emitter.on('order', () => this.addQueue());
  }

  orderList() {
    for (const idx in MENU) {
      if (idx === this.order) {
        this.queue = {
          order: MENU[idx].emoji,
          cups: this.cups,
          sec: MENU[idx].sec,
        };
      }
    }
    console.log(``);
    console.log(y(` == CURRENT ORDER ==`));
    console.table(this.queue);
  }

  addQueue() {
    this.orderList();
    QUEUE[this.guest] = this.queue;
    console.log(``);
    console.log(y(`===================== QUEUE =====================`));
    console.table(QUEUE);
    return emitter.emit('addQueue', QUEUE);
  }
}

// ============================= Barista ================================

class Barista {
  constructor() {
    this.working = [];
  }

  making() {
    function baristaQueue(obj) {
      let queue = [];
      for (const key in obj) {
        if (key === 'order') {
          for (let i = 0; i < obj.cups; i++) {
            queue.push(obj[key]);
          }
        }
      }
      return queue;
    }

    let work = baristaQueue(this.working[0]);
    console.log(``);
    console.log(y(` === BARISTA QUEUE ===`));
    console.log(work);
    // this.sayStart(work);
  }

  sayStart(print) {}

  finish() {}
}

// ============================== Queue =================================

class Queue extends EventEmitter {}

// ============================ Dash Board ===============================

class DashBoard extends Queue {
  constructor(status) {
    super();
    this.status = status;
  }
}

// ============================== print =================================

console.log(``);
console.log(`${y(` =======`)} ${m(`WELCOME TO RACCOON CAFE`)} ${y(`=======`)}`);
console.table(MENU);

const readline = require('readline');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  prompt: `Order: `,
});

let GN = 1;

let QUEUE = new Queue();
let barista = new Barista();

// ============================ read line ================================

rl.prompt();
rl.on('line', (order) => {
  console.log(`Thank you for your order: ${order}`);

  let orders = order.split(':');

  let cashier = new Cashier(GN++, orders[0], orders[1]);
  let manager = new Manager();

  emitter.emit('order');

  if (order === 'q') {
    rl.close();
  }
});

// =======================================================================
